list ( APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/cmake" )
cmake_minimum_required ( VERSION 3.6 )

find_program ( CLANG clang HINTS /opt/local/bin )
find_program ( CLANGPP clang++ HINTS /opt/local/bin )
set ( CXX $ENV{CXX} )
set ( CC $ENV{CC} )
if ( CLANG AND CLANGPP AND ( NOT CC ) AND ( NOT CXX ) AND NOT CMAKE_CXX_COMPILER AND NOT CMAKE_C_COMPILER )
  if ( NOT CMAKE_C_COMPILER )
    set ( CMAKE_C_COMPILER ${CLANG} )
  endif ()
  if ( NOT CMAKE_CXX_COMPILER )
    set ( CMAKE_CXX_COMPILER ${CLANGPP} )
  endif ()
  message ( STATUS "Found clang" )
endif ()

project ( dvformscpp VERSION 1.0.0 )
set ( CMAKE_CXX_STANDARD 11 )
set ( CMAKE_CXX_STANDARD_REQUIRED ON )
if ( NOT ${CMAKE_VERSION} VERSION_LESS 3.9 )
  cmake_policy ( SET CMP0068 NEW )
endif ()

add_custom_target(checks)

include ( FeatureSummary )
include ( GNUInstallDirs )
include ( CheckCXXCompilerFlag )
include ( GenerateExportHeader )
include ( GTest )
include ( CTest )
include ( CheckAndAddFlag )
find_package ( valgrind )
find_package ( iwyu )
find_package ( cppcheck )
find_package ( clang-tidy )
find_package ( Boost REQUIRED )
if ( NOT TARGET Boost::boost )
  message ( FATAL_ERROR "Boost cmake module not found!" )
endif ()

checkandaddflag ( -Weverything CMAKE_CXX_FLAGS )
checkandaddflag ( -Wall CMAKE_CXX_FLAGS )
checkandaddflag ( -Wextra CMAKE_CXX_FLAGS )
checkandaddflag ( -fdebug-macro CMAKE_CXX_FLAGS )
checkandaddflag ( -fmerge-constants CMAKE_CXX_FLAGS )
checkandaddflag ( -fspell-checking CMAKE_CXX_FLAGS )
checkandaddflag ( -pipe CMAKE_CXX_FLAGS )
checkandaddflag ( -Wall CMAKE_CXX_FLAGS )
checkandaddflag ( -Wextra CMAKE_CXX_FLAGS )
checkandaddflag ( -Wunused CMAKE_CXX_FLAGS )
checkandaddflag ( -Wuninitialized CMAKE_CXX_FLAGS )
checkandaddflag ( -Wmaybe-uninitialized CMAKE_CXX_FLAGS )
checkandaddflag ( -Winit-self CMAKE_CXX_FLAGS )
checkandaddflag ( -Wfloat-equal CMAKE_CXX_FLAGS )
checkandaddflag ( -Wshadow CMAKE_CXX_FLAGS )
checkandaddflag ( -Wshadow-all CMAKE_CXX_FLAGS )
checkandaddflag ( -Wsign-conversion CMAKE_CXX_FLAGS )
checkandaddflag ( -Wconversion CMAKE_CXX_FLAGS )
checkandaddflag ( -Wpedantic CMAKE_CXX_FLAGS )
checkandaddflag ( -Wno-variadic-macros CMAKE_CXX_FLAGS )
checkandaddflag ( -Wno-long-long CMAKE_CXX_FLAGS )
checkandaddflag ( -Wno-c99-extensions CMAKE_CXX_FLAGS )
checkandaddflag ( -Wno-unused-command-line-argument CMAKE_CXX_FLAGS )
checkandaddflag ( -fdiagnostics-show-template-tree CMAKE_CXX_FLAGS )
checkandaddflag ( -Qunused-arguments CMAKE_CXX_FLAGS )
checkandaddflag ( -Wno-weak-vtables CMAKE_CXX_FLAGS )
checkandaddflag ( -Wno-c++98-compat CMAKE_CXX_FLAGS )
checkandaddflag ( -Wno-global-constructors CMAKE_CXX_FLAGS )
checkandaddflag ( -Wno-global-constructors CMAKE_CXX_FLAGS )
checkandaddflag ( -Wno-zero-as-null-pointer-constant CMAKE_CXX_FLAGS )
checkandaddflag ( -Wno-unused-command-line-argument CMAKE_CXX_FLAGS )
checkandaddflag ( -Wno-padded CMAKE_CXX_FLAGS )
checkandaddflag ( -Wno-c++98-compat-pedantic CMAKE_CXX_FLAGS )
checkandaddflag ( -Wno-exit-time-destructors CMAKE_CXX_FLAGS )
checkandaddflag ( -ftemplate-backtrace-limit=0 CMAKE_CXX_FLAGS )
checkandaddflag ( -Wfatal-errors CMAKE_CXX_FLAGS )
checkandaddflag ( -fmessage-length=160 CMAKE_CXX_FLAGS )
checkandaddflag ( -Wsuggest-override CMAKE_CXX_FLAGS )
checkandaddflag ( -Wduplicated-cond CMAKE_CXX_FLAGS )
checkandaddflag ( -Wduplicated-branches CMAKE_CXX_FLAGS )
checkandaddflag ( -fdiagnostics-color CMAKE_CXX_FLAGS )
checkandaddflag ( -fcolor-diagnostics CMAKE_CXX_FLAGS )

add_subdirectory ( src )
if ( BUILD_TESTING )
  add_subdirectory ( test )

  add_custom_target ( installtest
                      COMMAND ${CMAKE_COMMAND} -E remove_directory installtest
                      COMMAND ${CMAKE_COMMAND} -E remove ${CMAKE_BINARY_DIR}/install_manifest*
                      COMMAND ${CMAKE_COMMAND} -E env DESTDIR=installtest ${CMAKE_COMMAND} --build ${CMAKE_BINARY_DIR} --target install
                      )
endif ()

include ( CPack )

include ( CMakePackageConfigHelpers )
write_basic_package_version_file ( "${CMAKE_CURRENT_BINARY_DIR}/dvformscppVersion.cmake"
                                   VERSION ${PROJECT_VERSION} COMPATIBILITY AnyNewerVersion )
export ( EXPORT dvformscpp FILE "${CMAKE_CURRENT_BINARY_DIR}/dvformscppConfig.cmake" )
install ( EXPORT dvformscpp
          FILE dvformscppConfig.cmake
          DESTINATION lib/cmake/dvforms
          )
install ( FILES "${CMAKE_CURRENT_BINARY_DIR}/dvformscppVersion.cmake"
          DESTINATION lib/cmake/dvforms
          COMPONENT Devel
          )
feature_summary ( WHAT ALL )
export ( PACKAGE dvformscpp )
message ( STATUS "CXX=${CMAKE_CXX_COMPILER} CC=${CMAKE_C_COMPILER}" )
